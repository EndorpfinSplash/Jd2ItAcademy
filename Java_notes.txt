Контракт - требования к функциональности.

--- --- Steams --- ---
https://stackoverflow.com/questions/38496455/modify-property-value-of-the-objects-in-list-using-java-8-streams
map + collect = для создания нового списка без преобразования исходной коллекции
foreach       = выполняет преобразование исходной коллекции. (является терминальным методом)
peek          = использутся зачастую для вывода результата промежуточного преобразования (является конвеерным методом)

все операции с потоками бывают
- терминальными (terminal)
- промежуточными\конвеерными (intermediate).


----
Lambda - сокращенная реализация интерфейсного метода;


В файл конфигурации application-config.xml спринга нужно добавить наименоваине пакета, где будет выполнятся сканирование бинов.
 <context:component-scan base-package="com.htp.domain"></context:component-scan>

Можно создавать множество xml-конфигураций - это удобно , т.к. появляется иерархия и каждый файл можно выделить под тематичесукю область.
 Подтянуть xml-файлы можно так: <import resource="loggers.xml"/>

------------------------------------------------------------------------------------
 ---- работа с properties
 1)
 в конфиге бинов можно определить бин, который будет содержать списки свойств
 он конструируется из списка файлов *.properties
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
         <property name="locations">
             <list>
                 <value>
                     classpath:client.properties
                 </value>
             </list>
         </property>
     </bean>

в дальнейшем к этим свойства можно обращаться по следующей нотации ${property_name}

2)
второй способ работы со свойствами предлагает namespace util
к свойствам <beans добавляем namespace
     xmlns:util="http://www.springframework.org/schema/util"

     xsi:schemaLocation="http://www.springframework.org/schema/util
                         http://www.springframework.org/schema/util/spring-util-3.2.xsd

   дальше объявляем бин типа properties
   Параметры: даем ему id как имя, и указываем файл из которого будут браться свойства.

       <util:properties
               id="database"
               location="classpath:database.properties"/>
чтобы обратиться к свойству исользуется следующая нотация:
value="#{database.driverName}" />-->
------------------------------------------------------------------------------------

-----------------------------Аспекты---------------------------------
-- аспект состоит из совета и точек сопряжения
функции охватывающие несколько точек приложения называются сквозными.
работа аспекта это совет (определяет что и когда(до , после , вокруг, поссле успешн.выполн, после сбоя(исключения)) делает аспект)
точки сопряжения =join points = отвечают на вопрос где? вплетать совет(аспект) (часто их определяют явно указывая необходимый класс и метод)

Spring поддерживет точки сопряжения только для методов (низкоизберательный фреймворк, но вполне самодостаточный)
Модель Spring AOP основана на использовании прокси-объектов.

аспекты в Spring – это всего лишь промежуточные объекты-обертки (прокси-объекты), реализующие те же самые
интерфейсы, что и компоненты, которые они обертывают

------------------------------Введение-в-spring-web-mvc---------------------------------------

https://github.com/wizardjedi/my-spring-learning/wiki/Введение-в-spring-web-mvc

Использование apache tiles
Кроме вывода по шаблону в web-приложениях может понадобиться группировка однотипных шаблонов (шаблон Composite).
Для решения задач составления шаблонов в макет (layout) используется библиотека Apache tiles.

Apache tiles позволяет определить layout, в который будут вставлены jsp-страницы. Таким образом, достигается возможность группировки отдельных шаблонов в страницы.